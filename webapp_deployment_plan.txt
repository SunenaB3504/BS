
Business Studies Webapp Deployment Plan
======================================

**Recommended: Use Live Server for Development**

For the best development experience, use the "Live Server" extension in VS Code or the `live-server` Node.js package. These tools automatically reload your browser whenever you save changes to your files, making development much faster and easier.

**Benefits of Live Server:**
- Instant browser refresh on file changes (HTML, CSS, JS, JSON, etc.)
- No need to manually reload the browser
- Simple setup and integration with VS Code

**How to use Live Server (VS Code):**
1. Install the "Live Server" extension in VS Code.
2. Right-click `index.html` in the root folder and select "Open with Live Server".
3. The browser will open and auto-refresh on every file save.

**Alternative:**
If you prefer the command line and have Node.js installed, run `npx live-server` from your project root.

You can still use Python's http.server or Apache for static serving, but Live Server is strongly recommended for development due to its live-reload feature.

1. Chapter-by-Chapter Deployment Approach

Adding a New Chapter & Content (Step-by-Step)
--------------------------------------------
1. Create a new folder for the chapter: `/chapters/chapterXXX/` (replace XXX with the chapter number, e.g., 103).
2. Add the following files inside the new chapter folder:
   - `mindmap.json` (hierarchical mindmap with at least 3 levels)
   - `questions.json` (MCQs, one word, assertion-reason, short/long/case-based questions)
   - `flashcards.json` (comprehensive flashcards)
   - `qa.json` (Q&A covering all key concepts)
3. Populate each file with content covering all main topics, subtopics, and details from the chapter. Use previous chapters as a template for structure and depth.
4. In `index.html` (now in the root), add a new `<option>` in the chapter dropdown for the new chapter (e.g., `<option value="103">Chapter 3</option>`).
5. Test the new chapter in the webapp:
   - Select the new chapter from the dropdown.
   - Check that mindmap, flashcards, questions, and Q&A load and display correctly.
   - Verify TTS, navigation, and interactivity for all content types.
6. Review for completeness and accuracy. Get feedback from a student or teacher if possible.

Troubleshooting Steps for New Chapters
--------------------------------------
1. If content does not appear for the new chapter:
   - Check that the folder and filenames are correct (e.g., `chapter103/mindmap.json`).
   - Ensure the dropdown value in `index.html` matches the folder number (e.g., value="103").
   - Confirm the server is running from the correct root directory (the parent of `chapters`).
   - Hard refresh the browser (Ctrl+F5) to clear cache.
   - Open the browser's Network tab (F12) and check the response for the relevant JSON file. Ensure it returns the expected content, not an old or wrong file.
   - If using `python -m http.server`, restart the server after adding or updating files.
2. If TTS or interactivity is missing:
   - Check for JavaScript errors in the browser console (F12 > Console).
   - Make sure the new content follows the same structure as previous chapters.
   - Ensure all required fields and arrays are present in the JSON files.
3. If questions or flashcards are missing or incomplete:
   - Check the JSON for syntax errors (missing commas, brackets, etc.).
   - Make sure all required question types and flashcards are included.
   - Reload the app and check again.
4. If navigation or dropdown does not show the new chapter:
   - Verify the `<option>` tag is present and correct in `index.html`.
   - Ensure the value matches the folder name.
5. For any persistent issues:
   - Compare the new chapter's files with a working chapter.
   - Ask for help or review with a peer or teacher.
-----------------------------------------
- Start with the available chapter PDF files (e.g., lebs101.pdf) in your workspace.
- For each chapter:
  1. Extract all headings, subheadings, and key points from the PDF to create a coverage checklist.
  2. Identify important concepts, definitions, and examples for mindmap, flashcards, and questions.
  3. Create a folder: `/chapters/chapterX/` (replace X with chapter number).
  4. Create empty files: `mindmap.json`, `flashcards.json`, `questions.json` in that folder. (Do not create `exercises.json`.)
  5. Populate mindmap.json with a hierarchical summary of the chapter, including at least three levels: main topics, subtopics, and detailed sub-points for each bullet (for deeper understanding). The mindmap must be visually interactive in the webapp, with collapsible/expandable nodes, modern fonts, and clear clickable arrows or icons indicating interactivity at each level. Text-to-Speech (TTS) must be available both globally (to read the entire mindmap) and per-node (to read individual nodes), with start and stop controls for both.
  6. Add 20 MCQs, 20 one word, 10 assertion-reason, 10 short answer, and 5 long/case-based questions to questions.json only. (The exercises section and file have been removed.)
     - For MCQs:
       - Each question must display a 'Check' button below the options.
       - When the 'Check' button is clicked, the selected answer is validated and immediate feedback is shown (correct/incorrect), along with the correct answer if the user's choice is incorrect.
       - If an explanation is available, it must be shown along with the feedback after checking the answer, not before.
       - Feedback and explanation should only be visible after the user clicks 'Check'.
       - Feedback should be clear and visually distinct (e.g., green for correct, red for incorrect).
       - The MCQ interface must be interactive and user-friendly for self-assessment.
     - Assertion-Reason questions now have a dedicated "Check" button for each question, just like MCQs.
     - Interactive validation and feedback are provided for assertion-reason questions:
       - If no option is selected, a prompt appears asking the user to select an option.
       - On checking, the app displays whether the selected answer is correct or incorrect, and shows the correct answer if needed.
       - If an explanation is present in the JSON, it is displayed below the feedback.
     - The validation/feedback experience for assertion-reason questions is now fully consistent with MCQs, supporting exam-style practice and immediate learning.
  7. Add a comprehensive set of flashcards to flashcards.json. Flashcards must:
     - Cover all key points, definitions, distinctions, objectives, characteristics, and examples from the chapter, ensuring exam readiness.
     - Be presented as one-by-one flippable cards with smooth transitions and navigation buttons (Prev/Next), allowing the user to flip to see the answer and move through the set interactively.
     - Display the current card number and total (e.g., 1/30) for user awareness.
     - Have navigation buttons placed below the card, outside the flippable area, for easy access and usability.
     - Load and display all flashcards present in the JSON file, with no artificial limit or truncation.
     - If the flashcard count in the UI is less than the JSON, debug for caching, path, or fetch issues.
  8. Use simple HTML/JS/CSS to render and test the content for the chapter.
  9. Check navigation, TTS (global and per-node), validation, and feedback.
  10. Review with your son or a teacher to ensure all points are covered and the format is correct.
  11. Only after confirmation, move to the next chapter.
- This ensures quality, reduces errors, and allows for feedback and improvements after each chapter.

2. Local Testing
----------------
- Open index.html in your browser and test all features (navigation, TTS, questions, exercises, etc.).
- Check on multiple devices (desktop, tablet, mobile) for responsiveness.
- Review content coverage and interactivity.
- Test TTS (global and per-node) for accessibility and usability.

3. Packaging for Moodle
-----------------------
- Ensure all files are in a single root folder (HTML, CSS, JS, JSON, assets). All main app files (index.html, app.js, style.css, questions.json) are now in the root, not in a webapp subfolder.
- Remove any unused or temporary files.
- Zip the entire folder (right-click > Send to > Compressed (zipped) folder on Windows).

4. Upload to Moodle
-------------------
- Log in to your Moodle site as an instructor or admin.
- Go to the course where you want to add the webapp.
- Choose 'Add an activity or resource' > 'File' or 'Folder'.
- Upload the zipped file or the folder contents.
- If using 'File', ensure 'Display' is set to 'Open' or 'In pop-up' for best experience.
- Save and return to course.

5. Student Access
-----------------
- Students click the resource in Moodle to launch the webapp in their browser.
- All features work offline (no server required).

6. Updates
----------
- To update content or features, edit files locally, re-zip, and re-upload to Moodle.
- Notify students if major changes are made.

7. Optional: Web Hosting
------------------------
- You can also host the app on any static web hosting service (GitHub Pages, Netlify, Vercel, etc.) for direct web access.
- For GitHub Pages, ensure all main app files (index.html, app.js, style.css, questions.json) are in the root of your repository. Set the Pages source to the root folder in your repository settings.
- Share the public link with students or embed in Moodle as an external tool.

8. Support & Maintenance
------------------------
- Keep a backup of your local project folder.
- Periodically review and update content for curriculum changes.
- Gather feedback from students for improvements.

- Text-to-Speech (TTS) Improvements:
  - Global Start/Stop TTS buttons must be visible above the navigation bar on all pages, not just mindmap.
  - Start TTS must read all visible content on the current page (all questions, all flashcards, or the full mindmap), not just the first item.
  - Stop TTS must immediately halt any ongoing speech.
  - TTS controls must be accessible and consistent across all content types for student convenience.


- Case Studies Section (Updated Implementation):
  - Each chapter now has a dedicated `case_studies.json` file (e.g., `chapters/chapter102/case_studies.json`), containing an array of case study objects.
  - Each case study object includes:
    - `"case"`: The scenario or case description.
    - `"questions"`: An array of questions related to the case.
    - `"answers"`: An array of answers corresponding to each question.
  - The webapp navigation includes a dedicated "Case Studies" section. When selected, it loads and displays the case studies from the chapter’s `case_studies.json` file using a dedicated loader (`loadCaseStudies`).
  - The frontend displays each case, its questions, and answers in a clear, structured format, with TTS (text-to-speech) support for each answer.
  - The code and data keys must match exactly (e.g., always use `case_studies` for consistency in naming and integration).
  - The UI allows users to review all case studies for the chapter, with each case and its Q&A clearly separated for easy study and revision.
  - This replaces the previous approach of embedding case studies in `questions.json`.
  - All navigation, loading, and rendering logic for case studies is now modular and robust, supporting future expansion and maintenance.

  - Long, short, and one-word answers are now rendered as bullet points (using HTML <ul><li>), not numbered points, for clarity and readability.
  - Long answer questions are segregated in the JSON as a separate array: `long_answer`.
  - For long answer answers with multiple bullet points, the Text-to-Speech (TTS) feature reads each bullet point separately, with a short pause (about 600ms) after each point for better comprehension.
  - A dedicated 'Listen Answer' button is available next to each long/short/one-word answer, which triggers the improved TTS bullet-point reading.
  - These improvements ensure that students can both read and listen to structured answers in a clear, exam-friendly format, and can easily access case studies as a separate section.

- Q&A Section:
  - Add a comprehensive Q&A section:
     - Create a `qa.json` file in each chapter folder.
     - Populate it with all key questions and answers from the chapter, covering definitions, objectives, characteristics, distinctions, management concepts, and case studies.
     - In the webapp, add a "Q&A" navigation item. When selected, display each question with a text box for the student to enter their answer and a "Check Answer" button to validate against the correct answer, providing instant feedback.
     - Answers are hidden by default and only shown after checking, supporting self-assessment and revision.
  - Remove all references to exercises and the exercises page from the navigation and codebase.
  - Ensure the Q&A section is fully functional and comprehensive for each chapter.
